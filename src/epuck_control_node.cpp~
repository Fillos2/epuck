/*
 * Copyright (C) 2008, Morgan Quigley and Willow Garage, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the names of Stanford University or Willow Garage, Inc. nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

// %Tag(FULLTEXT)%
#include "ros/ros.h"
#include "stdlib.h"

#include <string>
#include "std_msgs/String.h"
#include <sstream>
#include "geometry_msgs/Twist.h"
#include <serial/serial.h>

/**
 * This tutorial demonstrates simple receipt of messages over the ROS system.
 */
void cmd_vel_Callback(const geometry_msgs::Twist::ConstPtr& msg)
{
  ROS_INFO("ciao");
}


int main(int argc, char **argv)
{
  
  ros::init(argc, argv, "listener");
  
  std::string namesp = ros::this_node::getNamespace();
  
  ros::NodeHandle n; 
  
  
  ros::Subscriber sub = n.subscribe("cmd_vel", 1000, cmd_vel_Callback);


  std::string num= namesp.substr(7,4);
  char numero_epuck[6];
  int i;
  
  
  ROS_INFO_STREAM("Numero "<< num<<'\n');
 
  if(num == "2037")ROS_INFO_STREAM("Nodo epuck2037"<<'\n');
  else if(num == "1701") ROS_INFO_STREAM("Nodo epuck1701"<<'\n');
  else ROS_INFO_STREAM("errore"<<'\n');
  
 
  try
  {
      ser.setPort("/dev/rfcomm"+num);
      ser.setBaudrate(115200);
      //serial::Timeout to = serial::Timeout::simpleTimeout(1000);
      //ser.setTimeout(to);
      ser.open();
  }
  catch (serial::IOException& e)
  {
      ROS_ERROR_STREAM("Unable to open port ");
      return -1;
  }
 
  if(ser.isOpen()){
      ROS_INFO_STREAM("Serial Port initialized");
  }else{
      return -1;
  }
  ros::Rate loop_rate(1);

  while (ros::ok())
  {
    ROS_INFO_STREAM(num);
    ros::spinOnce();
    loop_rate.sleep();
  }
 

  return 0;
}

